package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strings"
	"unicode"
	"unicode/utf8"
)

// DO NOT EDIT: This file is auto generated by the pigeon PEG parser generator.

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 8, col: 1, offset: 102},
			expr: &actionExpr{
				pos: position{line: 9, col: 5, offset: 112},
				run: (*parser).callonStart1,
				expr: &seqExpr{
					pos: position{line: 9, col: 5, offset: 112},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 9, col: 8, offset: 115},
							label: "program",
							expr: &ruleRefExpr{
								pos:  position{line: 9, col: 16, offset: 123},
								name: "Program",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 483, col: 5, offset: 8851},
							expr: &anyMatcher{
								line: 483, col: 6, offset: 8852,
							},
						},
					},
				},
			},
		},
		{
			name: "Program",
			pos:  position{line: 13, col: 1, offset: 173},
			expr: &actionExpr{
				pos: position{line: 14, col: 5, offset: 185},
				run: (*parser).callonProgram1,
				expr: &labeledExpr{
					pos:   position{line: 14, col: 5, offset: 185},
					label: "body",
					expr: &ruleRefExpr{
						pos:  position{line: 14, col: 10, offset: 190},
						name: "SourceElements",
					},
				},
			},
		},
		{
			name: "SourceElements",
			pos:  position{line: 18, col: 1, offset: 256},
			expr: &actionExpr{
				pos: position{line: 19, col: 5, offset: 275},
				run: (*parser).callonSourceElements1,
				expr: &seqExpr{
					pos: position{line: 19, col: 5, offset: 275},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 19, col: 5, offset: 275},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 19, col: 10, offset: 280},
								name: "SourceElement",
							},
						},
						&labeledExpr{
							pos:   position{line: 19, col: 24, offset: 294},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 19, col: 29, offset: 299},
								expr: &seqExpr{
									pos: position{line: 19, col: 30, offset: 300},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 468, col: 5, offset: 8728},
											expr: &choiceExpr{
												pos: position{line: 468, col: 7, offset: 8730},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 474, col: 5, offset: 8791},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 471, col: 5, offset: 8765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 471, col: 5, offset: 8765},
																val:        "//",
																ignoreCase: false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 471, col: 10, offset: 8770},
																expr: &charClassMatcher{
																	pos:        position{line: 471, col: 10, offset: 8770},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 480, col: 5, offset: 8837},
																val:        "\n",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 19, col: 33, offset: 303},
											name: "SourceElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 468, col: 5, offset: 8728},
											expr: &choiceExpr{
												pos: position{line: 468, col: 7, offset: 8730},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 474, col: 5, offset: 8791},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 471, col: 5, offset: 8765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 471, col: 5, offset: 8765},
																val:        "//",
																ignoreCase: false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 471, col: 10, offset: 8770},
																expr: &charClassMatcher{
																	pos:        position{line: 471, col: 10, offset: 8770},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 480, col: 5, offset: 8837},
																val:        "\n",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SourceElement",
			pos:  position{line: 23, col: 1, offset: 365},
			expr: &ruleRefExpr{
				pos:  position{line: 24, col: 5, offset: 383},
				name: "Statement",
			},
		},
		{
			name: "Statement",
			pos:  position{line: 26, col: 1, offset: 394},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 408},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 27, col: 5, offset: 408},
						name: "VariableStatement",
					},
					&ruleRefExpr{
						pos:  position{line: 28, col: 5, offset: 430},
						name: "ReturnStatement",
					},
					&ruleRefExpr{
						pos:  position{line: 29, col: 5, offset: 450},
						name: "ExpressionStatement",
					},
					&ruleRefExpr{
						pos:  position{line: 30, col: 5, offset: 474},
						name: "BlockStatement",
					},
				},
			},
		},
		{
			name: "VariableStatement",
			pos:  position{line: 33, col: 1, offset: 491},
			expr: &actionExpr{
				pos: position{line: 34, col: 5, offset: 513},
				run: (*parser).callonVariableStatement1,
				expr: &labeledExpr{
					pos:   position{line: 34, col: 5, offset: 513},
					label: "declaration",
					expr: &ruleRefExpr{
						pos:  position{line: 34, col: 17, offset: 525},
						name: "VariableDeclaration",
					},
				},
			},
		},
		{
			name: "ReturnStatement",
			pos:  position{line: 38, col: 1, offset: 604},
			expr: &actionExpr{
				pos: position{line: 39, col: 5, offset: 624},
				run: (*parser).callonReturnStatement1,
				expr: &seqExpr{
					pos: position{line: 39, col: 5, offset: 624},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 39, col: 5, offset: 624},
							val:        "return",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 39, col: 17, offset: 636},
							label: "argument",
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 26, offset: 645},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "ExpressionStatement",
			pos:  position{line: 43, col: 1, offset: 708},
			expr: &actionExpr{
				pos: position{line: 44, col: 5, offset: 732},
				run: (*parser).callonExpressionStatement1,
				expr: &labeledExpr{
					pos:   position{line: 44, col: 5, offset: 732},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 44, col: 10, offset: 737},
						name: "Expr",
					},
				},
			},
		},
		{
			name: "BlockStatement",
			pos:  position{line: 48, col: 1, offset: 796},
			expr: &actionExpr{
				pos: position{line: 49, col: 5, offset: 815},
				run: (*parser).callonBlockStatement1,
				expr: &seqExpr{
					pos: position{line: 49, col: 5, offset: 815},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 49, col: 5, offset: 815},
							val:        "{",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 49, col: 12, offset: 822},
							label: "body",
							expr: &zeroOrMoreExpr{
								pos: position{line: 49, col: 17, offset: 827},
								expr: &seqExpr{
									pos: position{line: 49, col: 19, offset: 829},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 468, col: 5, offset: 8728},
											expr: &choiceExpr{
												pos: position{line: 468, col: 7, offset: 8730},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 474, col: 5, offset: 8791},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 471, col: 5, offset: 8765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 471, col: 5, offset: 8765},
																val:        "//",
																ignoreCase: false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 471, col: 10, offset: 8770},
																expr: &charClassMatcher{
																	pos:        position{line: 471, col: 10, offset: 8770},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 480, col: 5, offset: 8837},
																val:        "\n",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 49, col: 22, offset: 832},
											name: "Statement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 468, col: 5, offset: 8728},
											expr: &choiceExpr{
												pos: position{line: 468, col: 7, offset: 8730},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 474, col: 5, offset: 8791},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 471, col: 5, offset: 8765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 471, col: 5, offset: 8765},
																val:        "//",
																ignoreCase: false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 471, col: 10, offset: 8770},
																expr: &charClassMatcher{
																	pos:        position{line: 471, col: 10, offset: 8770},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 480, col: 5, offset: 8837},
																val:        "\n",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 49, col: 41, offset: 851},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VariableDeclaration",
			pos:  position{line: 53, col: 1, offset: 908},
			expr: &actionExpr{
				pos: position{line: 54, col: 5, offset: 932},
				run: (*parser).callonVariableDeclaration1,
				expr: &seqExpr{
					pos: position{line: 54, col: 5, offset: 932},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 54, col: 5, offset: 932},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 460, col: 5, offset: 8638},
								run: (*parser).callonVariableDeclaration4,
								expr: &seqExpr{
									pos: position{line: 460, col: 5, offset: 8638},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 460, col: 5, offset: 8638},
											val:        "[_\\pL]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 460, col: 11, offset: 8644},
											expr: &charClassMatcher{
												pos:        position{line: 460, col: 11, offset: 8644},
												val:        "[_0-9\\pL]",
												chars:      []rune{'_'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 54, col: 22, offset: 949},
							val:        "=",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 54, col: 29, offset: 956},
							label: "init",
							expr: &ruleRefExpr{
								pos:  position{line: 54, col: 34, offset: 961},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "MemberExpressions",
			pos:  position{line: 59, col: 1, offset: 1022},
			expr: &actionExpr{
				pos: position{line: 60, col: 5, offset: 1044},
				run: (*parser).callonMemberExpressions1,
				expr: &seqExpr{
					pos: position{line: 60, col: 5, offset: 1044},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 60, col: 5, offset: 1044},
							label: "head",
							expr: &actionExpr{
								pos: position{line: 460, col: 5, offset: 8638},
								run: (*parser).callonMemberExpressions4,
								expr: &seqExpr{
									pos: position{line: 460, col: 5, offset: 8638},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 460, col: 5, offset: 8638},
											val:        "[_\\pL]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 460, col: 11, offset: 8644},
											expr: &charClassMatcher{
												pos:        position{line: 460, col: 11, offset: 8644},
												val:        "[_0-9\\pL]",
												chars:      []rune{'_'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 61, col: 5, offset: 1091},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 61, col: 10, offset: 1096},
								expr: &actionExpr{
									pos: position{line: 62, col: 10, offset: 1107},
									run: (*parser).callonMemberExpressions11,
									expr: &seqExpr{
										pos: position{line: 62, col: 10, offset: 1107},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 468, col: 5, offset: 8728},
												expr: &choiceExpr{
													pos: position{line: 468, col: 7, offset: 8730},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 474, col: 5, offset: 8791},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
														&seqExpr{
															pos: position{line: 471, col: 5, offset: 8765},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 471, col: 5, offset: 8765},
																	val:        "//",
																	ignoreCase: false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 471, col: 10, offset: 8770},
																	expr: &charClassMatcher{
																		pos:        position{line: 471, col: 10, offset: 8770},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
																&litMatcher{
																	pos:        position{line: 480, col: 5, offset: 8837},
																	val:        "\n",
																	ignoreCase: false,
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 62, col: 13, offset: 1110},
												label: "property",
												expr: &ruleRefExpr{
													pos:  position{line: 62, col: 22, offset: 1119},
													name: "MemberExpressionProperty",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MemberExpressionProperty",
			pos:  position{line: 70, col: 1, offset: 1259},
			expr: &choiceExpr{
				pos: position{line: 71, col: 5, offset: 1288},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 71, col: 5, offset: 1288},
						run: (*parser).callonMemberExpressionProperty2,
						expr: &seqExpr{
							pos: position{line: 71, col: 5, offset: 1288},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 71, col: 5, offset: 1288},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 71, col: 12, offset: 1295},
									label: "property",
									expr: &actionExpr{
										pos: position{line: 460, col: 5, offset: 8638},
										run: (*parser).callonMemberExpressionProperty14,
										expr: &seqExpr{
											pos: position{line: 460, col: 5, offset: 8638},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 460, col: 5, offset: 8638},
													val:        "[_\\pL]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 460, col: 11, offset: 8644},
													expr: &charClassMatcher{
														pos:        position{line: 460, col: 11, offset: 8644},
														val:        "[_0-9\\pL]",
														chars:      []rune{'_'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 74, col: 7, offset: 1356},
						run: (*parser).callonMemberExpressionProperty19,
						expr: &seqExpr{
							pos: position{line: 74, col: 7, offset: 1356},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 74, col: 7, offset: 1356},
									val:        "[",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 74, col: 14, offset: 1363},
									label: "property",
									expr: &ruleRefExpr{
										pos:  position{line: 74, col: 23, offset: 1372},
										name: "Primary",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 74, col: 34, offset: 1383},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CallExpression",
			pos:  position{line: 78, col: 1, offset: 1426},
			expr: &actionExpr{
				pos: position{line: 79, col: 5, offset: 1445},
				run: (*parser).callonCallExpression1,
				expr: &seqExpr{
					pos: position{line: 79, col: 5, offset: 1445},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 79, col: 5, offset: 1445},
							label: "head",
							expr: &actionExpr{
								pos: position{line: 80, col: 7, offset: 1458},
								run: (*parser).callonCallExpression4,
								expr: &seqExpr{
									pos: position{line: 80, col: 7, offset: 1458},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 80, col: 7, offset: 1458},
											label: "callee",
											expr: &ruleRefExpr{
												pos:  position{line: 80, col: 14, offset: 1465},
												name: "MemberExpressions",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 468, col: 5, offset: 8728},
											expr: &choiceExpr{
												pos: position{line: 468, col: 7, offset: 8730},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 474, col: 5, offset: 8791},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 471, col: 5, offset: 8765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 471, col: 5, offset: 8765},
																val:        "//",
																ignoreCase: false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 471, col: 10, offset: 8770},
																expr: &charClassMatcher{
																	pos:        position{line: 471, col: 10, offset: 8770},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 480, col: 5, offset: 8837},
																val:        "\n",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 80, col: 35, offset: 1486},
											label: "args",
											expr: &ruleRefExpr{
												pos:  position{line: 80, col: 40, offset: 1491},
												name: "Arguments",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 84, col: 5, offset: 1574},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 84, col: 10, offset: 1579},
								expr: &choiceExpr{
									pos: position{line: 85, col: 9, offset: 1589},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 85, col: 9, offset: 1589},
											run: (*parser).callonCallExpression21,
											expr: &seqExpr{
												pos: position{line: 85, col: 9, offset: 1589},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 468, col: 5, offset: 8728},
														expr: &choiceExpr{
															pos: position{line: 468, col: 7, offset: 8730},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 474, col: 5, offset: 8791},
																	val:        "[ \\t\\r\\n]",
																	chars:      []rune{' ', '\t', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&seqExpr{
																	pos: position{line: 471, col: 5, offset: 8765},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 471, col: 5, offset: 8765},
																			val:        "//",
																			ignoreCase: false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 471, col: 10, offset: 8770},
																			expr: &charClassMatcher{
																				pos:        position{line: 471, col: 10, offset: 8770},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 480, col: 5, offset: 8837},
																			val:        "\n",
																			ignoreCase: false,
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 85, col: 12, offset: 1592},
														label: "args",
														expr: &ruleRefExpr{
															pos:  position{line: 85, col: 17, offset: 1597},
															name: "Arguments",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 88, col: 10, offset: 1680},
											run: (*parser).callonCallExpression33,
											expr: &seqExpr{
												pos: position{line: 88, col: 10, offset: 1680},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 468, col: 5, offset: 8728},
														expr: &choiceExpr{
															pos: position{line: 468, col: 7, offset: 8730},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 474, col: 5, offset: 8791},
																	val:        "[ \\t\\r\\n]",
																	chars:      []rune{' ', '\t', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&seqExpr{
																	pos: position{line: 471, col: 5, offset: 8765},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 471, col: 5, offset: 8765},
																			val:        "//",
																			ignoreCase: false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 471, col: 10, offset: 8770},
																			expr: &charClassMatcher{
																				pos:        position{line: 471, col: 10, offset: 8770},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 480, col: 5, offset: 8837},
																			val:        "\n",
																			ignoreCase: false,
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 88, col: 13, offset: 1683},
														label: "property",
														expr: &ruleRefExpr{
															pos:  position{line: 88, col: 22, offset: 1692},
															name: "MemberExpressionProperty",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PipeExpression",
			pos:  position{line: 96, col: 1, offset: 1857},
			expr: &actionExpr{
				pos: position{line: 97, col: 5, offset: 1876},
				run: (*parser).callonPipeExpression1,
				expr: &seqExpr{
					pos: position{line: 97, col: 5, offset: 1876},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 97, col: 5, offset: 1876},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 97, col: 10, offset: 1881},
								name: "PipeExpressionHead",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 97, col: 32, offset: 1903},
							label: "tail",
							expr: &oneOrMoreExpr{
								pos: position{line: 97, col: 37, offset: 1908},
								expr: &seqExpr{
									pos: position{line: 97, col: 38, offset: 1909},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 468, col: 5, offset: 8728},
											expr: &choiceExpr{
												pos: position{line: 468, col: 7, offset: 8730},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 474, col: 5, offset: 8791},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 471, col: 5, offset: 8765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 471, col: 5, offset: 8765},
																val:        "//",
																ignoreCase: false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 471, col: 10, offset: 8770},
																expr: &charClassMatcher{
																	pos:        position{line: 471, col: 10, offset: 8770},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 480, col: 5, offset: 8837},
																val:        "\n",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 97, col: 41, offset: 1912},
											name: "PipeExpressionPipe",
										},
										&zeroOrMoreExpr{
											pos: position{line: 468, col: 5, offset: 8728},
											expr: &choiceExpr{
												pos: position{line: 468, col: 7, offset: 8730},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 474, col: 5, offset: 8791},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 471, col: 5, offset: 8765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 471, col: 5, offset: 8765},
																val:        "//",
																ignoreCase: false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 471, col: 10, offset: 8770},
																expr: &charClassMatcher{
																	pos:        position{line: 471, col: 10, offset: 8770},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 480, col: 5, offset: 8837},
																val:        "\n",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PipeExpressionHead",
			pos:  position{line: 101, col: 1, offset: 1995},
			expr: &choiceExpr{
				pos: position{line: 102, col: 5, offset: 2018},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 102, col: 5, offset: 2018},
						name: "CallExpression",
					},
					&actionExpr{
						pos: position{line: 378, col: 5, offset: 7123},
						run: (*parser).callonPipeExpressionHead3,
						expr: &seqExpr{
							pos: position{line: 378, col: 7, offset: 7125},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 378, col: 7, offset: 7125},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 378, col: 11, offset: 7129},
									expr: &choiceExpr{
										pos: position{line: 386, col: 5, offset: 7338},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 386, col: 5, offset: 7338},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 386, col: 5, offset: 7338},
														expr: &charClassMatcher{
															pos:        position{line: 386, col: 8, offset: 7341},
															val:        "[\"\\\\\\n]",
															chars:      []rune{'"', '\\', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&anyMatcher{
														line: 466, col: 5, offset: 8719,
													},
												},
											},
											&seqExpr{
												pos: position{line: 387, col: 5, offset: 7375},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 387, col: 5, offset: 7375},
														val:        "\\",
														ignoreCase: false,
													},
													&choiceExpr{
														pos: position{line: 390, col: 5, offset: 7423},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 390, col: 5, offset: 7423},
																val:        "\"",
																ignoreCase: false,
															},
															&actionExpr{
																pos: position{line: 391, col: 5, offset: 7431},
																run: (*parser).callonPipeExpressionHead16,
																expr: &choiceExpr{
																	pos: position{line: 391, col: 7, offset: 7433},
																	alternatives: []interface{}{
																		&anyMatcher{
																			line: 466, col: 5, offset: 8719,
																		},
																		&litMatcher{
																			pos:        position{line: 480, col: 5, offset: 8837},
																			val:        "\n",
																			ignoreCase: false,
																		},
																		&notExpr{
																			pos: position{line: 483, col: 5, offset: 8851},
																			expr: &anyMatcher{
																				line: 483, col: 6, offset: 8852,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 378, col: 29, offset: 7147},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 381, col: 5, offset: 7207},
						run: (*parser).callonPipeExpressionHead23,
						expr: &seqExpr{
							pos: position{line: 381, col: 7, offset: 7209},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 381, col: 7, offset: 7209},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 381, col: 11, offset: 7213},
									expr: &choiceExpr{
										pos: position{line: 386, col: 5, offset: 7338},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 386, col: 5, offset: 7338},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 386, col: 5, offset: 7338},
														expr: &charClassMatcher{
															pos:        position{line: 386, col: 8, offset: 7341},
															val:        "[\"\\\\\\n]",
															chars:      []rune{'"', '\\', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&anyMatcher{
														line: 466, col: 5, offset: 8719,
													},
												},
											},
											&seqExpr{
												pos: position{line: 387, col: 5, offset: 7375},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 387, col: 5, offset: 7375},
														val:        "\\",
														ignoreCase: false,
													},
													&choiceExpr{
														pos: position{line: 390, col: 5, offset: 7423},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 390, col: 5, offset: 7423},
																val:        "\"",
																ignoreCase: false,
															},
															&actionExpr{
																pos: position{line: 391, col: 5, offset: 7431},
																run: (*parser).callonPipeExpressionHead36,
																expr: &choiceExpr{
																	pos: position{line: 391, col: 7, offset: 7433},
																	alternatives: []interface{}{
																		&anyMatcher{
																			line: 466, col: 5, offset: 8719,
																		},
																		&litMatcher{
																			pos:        position{line: 480, col: 5, offset: 8837},
																			val:        "\n",
																			ignoreCase: false,
																		},
																		&notExpr{
																			pos: position{line: 483, col: 5, offset: 8851},
																			expr: &anyMatcher{
																				line: 483, col: 6, offset: 8852,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 381, col: 31, offset: 7233},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 480, col: 5, offset: 8837},
											val:        "\n",
											ignoreCase: false,
										},
										&notExpr{
											pos: position{line: 483, col: 5, offset: 8851},
											expr: &anyMatcher{
												line: 483, col: 6, offset: 8852,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 426, col: 5, offset: 8041},
						run: (*parser).callonPipeExpressionHead46,
						expr: &seqExpr{
							pos: position{line: 426, col: 5, offset: 8041},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 426, col: 8, offset: 8044},
									val:        "true",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 429, col: 5, offset: 8115},
						run: (*parser).callonPipeExpressionHead65,
						expr: &seqExpr{
							pos: position{line: 429, col: 5, offset: 8115},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 429, col: 8, offset: 8118},
									val:        "false",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 397, col: 5, offset: 7543},
						run: (*parser).callonPipeExpressionHead84,
						expr: &seqExpr{
							pos: position{line: 397, col: 5, offset: 7543},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 397, col: 5, offset: 7543},
									val:        "/",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 397, col: 9, offset: 7547},
									label: "pattern",
									expr: &actionExpr{
										pos: position{line: 402, col: 5, offset: 7624},
										run: (*parser).callonPipeExpressionHead88,
										expr: &labeledExpr{
											pos:   position{line: 402, col: 5, offset: 7624},
											label: "chars",
											expr: &oneOrMoreExpr{
												pos: position{line: 402, col: 11, offset: 7630},
												expr: &choiceExpr{
													pos: position{line: 407, col: 5, offset: 7714},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 407, col: 5, offset: 7714},
															run: (*parser).callonPipeExpressionHead92,
															expr: &seqExpr{
																pos: position{line: 407, col: 5, offset: 7714},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 407, col: 5, offset: 7714},
																		expr: &charClassMatcher{
																			pos:        position{line: 407, col: 6, offset: 7715},
																			val:        "[\\\\/]",
																			chars:      []rune{'\\', '/'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 407, col: 12, offset: 7721},
																		label: "re",
																		expr: &actionExpr{
																			pos: position{line: 421, col: 5, offset: 7961},
																			run: (*parser).callonPipeExpressionHead97,
																			expr: &seqExpr{
																				pos: position{line: 421, col: 5, offset: 7961},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 421, col: 5, offset: 7961},
																						expr: &charClassMatcher{
																							pos:        position{line: 477, col: 5, offset: 8821},
																							val:        "[\\n\\r]",
																							chars:      []rune{'\n', '\r'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&anyMatcher{
																						line: 466, col: 5, offset: 8719,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 413, col: 5, offset: 7830},
															run: (*parser).callonPipeExpressionHead102,
															expr: &litMatcher{
																pos:        position{line: 413, col: 5, offset: 7830},
																val:        "\\/",
																ignoreCase: false,
															},
														},
														&actionExpr{
															pos: position{line: 416, col: 5, offset: 7878},
															run: (*parser).callonPipeExpressionHead104,
															expr: &seqExpr{
																pos: position{line: 416, col: 5, offset: 7878},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 416, col: 5, offset: 7878},
																		val:        "\\",
																		ignoreCase: false,
																	},
																	&actionExpr{
																		pos: position{line: 421, col: 5, offset: 7961},
																		run: (*parser).callonPipeExpressionHead107,
																		expr: &seqExpr{
																			pos: position{line: 421, col: 5, offset: 7961},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 421, col: 5, offset: 7961},
																					expr: &charClassMatcher{
																						pos:        position{line: 477, col: 5, offset: 8821},
																						val:        "[\\n\\r]",
																						chars:      []rune{'\n', '\r'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&anyMatcher{
																					line: 466, col: 5, offset: 8719,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 397, col: 28, offset: 7566},
									val:        "/",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 453, col: 5, offset: 8452},
						run: (*parser).callonPipeExpressionHead113,
						expr: &litMatcher{
							pos:        position{line: 453, col: 5, offset: 8452},
							val:        "<-",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 373, col: 5, offset: 7036},
						run: (*parser).callonPipeExpressionHead115,
						expr: &oneOrMoreExpr{
							pos: position{line: 373, col: 5, offset: 7036},
							expr: &seqExpr{
								pos: position{line: 370, col: 5, offset: 6993},
								exprs: []interface{}{
									&choiceExpr{
										pos: position{line: 439, col: 6, offset: 8288},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 439, col: 6, offset: 8288},
												val:        "0",
												ignoreCase: false,
											},
											&seqExpr{
												pos: position{line: 439, col: 12, offset: 8294},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 447, col: 5, offset: 8412},
														val:        "[1-9]",
														ranges:     []rune{'1', '9'},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 439, col: 25, offset: 8307},
														expr: &charClassMatcher{
															pos:        position{line: 450, col: 5, offset: 8429},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&choiceExpr{
										pos: position{line: 361, col: 9, offset: 6843},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 342, col: 5, offset: 6676},
												val:        "ns",
												ignoreCase: false,
											},
											&litMatcher{
												pos:        position{line: 345, col: 6, offset: 6704},
												val:        "us",
												ignoreCase: false,
											},
											&litMatcher{
												pos:        position{line: 345, col: 13, offset: 6711},
												val:        "µs",
												ignoreCase: false,
											},
											&litMatcher{
												pos:        position{line: 345, col: 20, offset: 6719},
												val:        "μs",
												ignoreCase: false,
											},
											&litMatcher{
												pos:        position{line: 348, col: 5, offset: 6748},
												val:        "ms",
												ignoreCase: false,
											},
											&charClassMatcher{
												pos:        position{line: 351, col: 5, offset: 6770},
												val:        "[smh]",
												chars:      []rune{'s', 'm', 'h'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 337, col: 5, offset: 6588},
						run: (*parser).callonPipeExpressionHead131,
						expr: &seqExpr{
							pos: position{line: 337, col: 5, offset: 6588},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 331, col: 18, offset: 6503},
									val:        "-",
									ignoreCase: false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 331, col: 32, offset: 6517},
									val:        "-",
									ignoreCase: false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 337, col: 14, offset: 6597},
									val:        "T",
									ignoreCase: false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 328, col: 14, offset: 6433},
									val:        ":",
									ignoreCase: false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 328, col: 29, offset: 6448},
									val:        ":",
									ignoreCase: false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrOneExpr{
									pos: position{line: 328, col: 44, offset: 6463},
									expr: &seqExpr{
										pos: position{line: 319, col: 5, offset: 6303},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 319, col: 5, offset: 6303},
												val:        ".",
												ignoreCase: false,
											},
											&oneOrMoreExpr{
												pos: position{line: 319, col: 9, offset: 6307},
												expr: &charClassMatcher{
													pos:        position{line: 450, col: 5, offset: 8429},
													val:        "[0-9]",
													ranges:     []rune{'0', '9'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 325, col: 6, offset: 6386},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 325, col: 6, offset: 6386},
											val:        "Z",
											ignoreCase: false,
										},
										&seqExpr{
											pos: position{line: 322, col: 5, offset: 6333},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 322, col: 6, offset: 6334},
													val:        "[+-]",
													chars:      []rune{'+', '-'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 450, col: 5, offset: 8429},
													val:        "[0-9]",
													ranges:     []rune{'0', '9'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 450, col: 5, offset: 8429},
													val:        "[0-9]",
													ranges:     []rune{'0', '9'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 322, col: 26, offset: 6354},
													val:        ":",
													ignoreCase: false,
												},
												&charClassMatcher{
													pos:        position{line: 450, col: 5, offset: 8429},
													val:        "[0-9]",
													ranges:     []rune{'0', '9'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 450, col: 5, offset: 8429},
													val:        "[0-9]",
													ranges:     []rune{'0', '9'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 434, col: 5, offset: 8206},
						run: (*parser).callonPipeExpressionHead166,
						expr: &seqExpr{
							pos: position{line: 434, col: 5, offset: 8206},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 439, col: 6, offset: 8288},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 439, col: 6, offset: 8288},
											val:        "0",
											ignoreCase: false,
										},
										&seqExpr{
											pos: position{line: 439, col: 12, offset: 8294},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 447, col: 5, offset: 8412},
													val:        "[1-9]",
													ranges:     []rune{'1', '9'},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 439, col: 25, offset: 8307},
													expr: &charClassMatcher{
														pos:        position{line: 450, col: 5, offset: 8429},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 434, col: 13, offset: 8214},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 434, col: 17, offset: 8218},
									expr: &charClassMatcher{
										pos:        position{line: 450, col: 5, offset: 8429},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 442, col: 5, offset: 8335},
						run: (*parser).callonPipeExpressionHead177,
						expr: &choiceExpr{
							pos: position{line: 439, col: 6, offset: 8288},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 439, col: 6, offset: 8288},
									val:        "0",
									ignoreCase: false,
								},
								&seqExpr{
									pos: position{line: 439, col: 12, offset: 8294},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 447, col: 5, offset: 8412},
											val:        "[1-9]",
											ranges:     []rune{'1', '9'},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 439, col: 25, offset: 8307},
											expr: &charClassMatcher{
												pos:        position{line: 450, col: 5, offset: 8429},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 104, col: 5, offset: 2171},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 105, col: 5, offset: 2181},
						name: "MemberExpressions",
					},
					&actionExpr{
						pos: position{line: 460, col: 5, offset: 8638},
						run: (*parser).callonPipeExpressionHead186,
						expr: &seqExpr{
							pos: position{line: 460, col: 5, offset: 8638},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 460, col: 5, offset: 8638},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 460, col: 11, offset: 8644},
									expr: &charClassMatcher{
										pos:        position{line: 460, col: 11, offset: 8644},
										val:        "[_0-9\\pL]",
										chars:      []rune{'_'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 107, col: 5, offset: 2218},
						name: "ObjectExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 5, offset: 2239},
						name: "ArrowFunctionExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 109, col: 5, offset: 2267},
						name: "Parens",
					},
				},
			},
		},
		{
			name: "PipeExpressionPipe",
			pos:  position{line: 111, col: 1, offset: 2275},
			expr: &actionExpr{
				pos: position{line: 112, col: 5, offset: 2298},
				run: (*parser).callonPipeExpressionPipe1,
				expr: &seqExpr{
					pos: position{line: 112, col: 5, offset: 2298},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 112, col: 5, offset: 2298},
							val:        "|>",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 13, offset: 2306},
							label: "call",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 18, offset: 2311},
								name: "CallExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "Arguments",
			pos:  position{line: 116, col: 1, offset: 2388},
			expr: &actionExpr{
				pos: position{line: 117, col: 5, offset: 2402},
				run: (*parser).callonArguments1,
				expr: &seqExpr{
					pos: position{line: 117, col: 5, offset: 2402},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 117, col: 5, offset: 2402},
							val:        "(",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 117, col: 12, offset: 2409},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 117, col: 17, offset: 2414},
								expr: &ruleRefExpr{
									pos:  position{line: 117, col: 18, offset: 2415},
									name: "ObjectProperties",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 117, col: 40, offset: 2437},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ArrowFunctionExpression",
			pos:  position{line: 121, col: 1, offset: 2473},
			expr: &actionExpr{
				pos: position{line: 122, col: 5, offset: 2501},
				run: (*parser).callonArrowFunctionExpression1,
				expr: &seqExpr{
					pos: position{line: 122, col: 5, offset: 2501},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 122, col: 5, offset: 2501},
							val:        "(",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 122, col: 12, offset: 2508},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 122, col: 19, offset: 2515},
								expr: &ruleRefExpr{
									pos:  position{line: 122, col: 19, offset: 2515},
									name: "ArrowFunctionParams",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 122, col: 43, offset: 2539},
							val:        ")",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 122, col: 50, offset: 2546},
							val:        "=>",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 122, col: 58, offset: 2554},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 63, offset: 2559},
								name: "ArrowFunctionBody",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ArrowFunctionParams",
			pos:  position{line: 126, col: 1, offset: 2646},
			expr: &actionExpr{
				pos: position{line: 127, col: 5, offset: 2670},
				run: (*parser).callonArrowFunctionParams1,
				expr: &seqExpr{
					pos: position{line: 127, col: 5, offset: 2670},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 127, col: 5, offset: 2670},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 11, offset: 2676},
								name: "ArrowFunctionParam",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 127, col: 33, offset: 2698},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 127, col: 38, offset: 2703},
								expr: &ruleRefExpr{
									pos:  position{line: 127, col: 38, offset: 2703},
									name: "ArrowFunctionParamsRest",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 127, col: 63, offset: 2728},
							expr: &litMatcher{
								pos:        position{line: 127, col: 63, offset: 2728},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "ArrowFunctionParamsRest",
			pos:  position{line: 131, col: 1, offset: 2813},
			expr: &actionExpr{
				pos: position{line: 132, col: 5, offset: 2841},
				run: (*parser).callonArrowFunctionParamsRest1,
				expr: &seqExpr{
					pos: position{line: 132, col: 5, offset: 2841},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 132, col: 5, offset: 2841},
							val:        ",",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 132, col: 13, offset: 2849},
							label: "arg",
							expr: &ruleRefExpr{
								pos:  position{line: 132, col: 17, offset: 2853},
								name: "ArrowFunctionParam",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ArrowFunctionParam",
			pos:  position{line: 136, col: 1, offset: 2906},
			expr: &choiceExpr{
				pos: position{line: 137, col: 5, offset: 2929},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 137, col: 5, offset: 2929},
						run: (*parser).callonArrowFunctionParam2,
						expr: &seqExpr{
							pos: position{line: 137, col: 5, offset: 2929},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 137, col: 5, offset: 2929},
									label: "key",
									expr: &actionExpr{
										pos: position{line: 460, col: 5, offset: 8638},
										run: (*parser).callonArrowFunctionParam5,
										expr: &seqExpr{
											pos: position{line: 460, col: 5, offset: 8638},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 460, col: 5, offset: 8638},
													val:        "[_\\pL]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 460, col: 11, offset: 8644},
													expr: &charClassMatcher{
														pos:        position{line: 460, col: 11, offset: 8644},
														val:        "[_0-9\\pL]",
														chars:      []rune{'_'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 137, col: 23, offset: 2947},
									val:        "=",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 137, col: 30, offset: 2954},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 36, offset: 2960},
										name: "Primary",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 140, col: 5, offset: 3033},
						run: (*parser).callonArrowFunctionParam37,
						expr: &seqExpr{
							pos: position{line: 140, col: 5, offset: 3033},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 140, col: 5, offset: 3033},
									label: "key",
									expr: &actionExpr{
										pos: position{line: 460, col: 5, offset: 8638},
										run: (*parser).callonArrowFunctionParam40,
										expr: &seqExpr{
											pos: position{line: 460, col: 5, offset: 8638},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 460, col: 5, offset: 8638},
													val:        "[_\\pL]",
													chars:      []rune{'_'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 460, col: 11, offset: 8644},
													expr: &charClassMatcher{
														pos:        position{line: 460, col: 11, offset: 8644},
														val:        "[_0-9\\pL]",
														chars:      []rune{'_'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ArrowFunctionBody",
			pos:  position{line: 145, col: 1, offset: 3109},
			expr: &choiceExpr{
				pos: position{line: 146, col: 5, offset: 3131},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 146, col: 5, offset: 3131},
						run: (*parser).callonArrowFunctionBody2,
						expr: &labeledExpr{
							pos:   position{line: 146, col: 5, offset: 3131},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 10, offset: 3136},
								name: "Expr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 149, col: 5, offset: 3176},
						run: (*parser).callonArrowFunctionBody5,
						expr: &labeledExpr{
							pos:   position{line: 149, col: 5, offset: 3176},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 149, col: 10, offset: 3181},
								name: "BlockStatement",
							},
						},
					},
				},
			},
		},
		{
			name: "ObjectExpression",
			pos:  position{line: 153, col: 1, offset: 3224},
			expr: &actionExpr{
				pos: position{line: 154, col: 5, offset: 3245},
				run: (*parser).callonObjectExpression1,
				expr: &seqExpr{
					pos: position{line: 154, col: 5, offset: 3245},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 154, col: 5, offset: 3245},
							val:        "{",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 154, col: 12, offset: 3252},
							label: "object",
							expr: &zeroOrOneExpr{
								pos: position{line: 154, col: 19, offset: 3259},
								expr: &ruleRefExpr{
									pos:  position{line: 154, col: 20, offset: 3260},
									name: "ObjectProperties",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 154, col: 42, offset: 3282},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ObjectProperties",
			pos:  position{line: 158, col: 1, offset: 3316},
			expr: &actionExpr{
				pos: position{line: 159, col: 5, offset: 3337},
				run: (*parser).callonObjectProperties1,
				expr: &seqExpr{
					pos: position{line: 159, col: 5, offset: 3337},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 159, col: 5, offset: 3337},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 159, col: 11, offset: 3343},
								name: "Property",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 159, col: 23, offset: 3355},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 159, col: 28, offset: 3360},
								expr: &ruleRefExpr{
									pos:  position{line: 159, col: 28, offset: 3360},
									name: "PropertiesRest",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 159, col: 47, offset: 3379},
							expr: &litMatcher{
								pos:        position{line: 159, col: 47, offset: 3379},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "PropertiesRest",
			pos:  position{line: 163, col: 1, offset: 3445},
			expr: &actionExpr{
				pos: position{line: 164, col: 5, offset: 3464},
				run: (*parser).callonPropertiesRest1,
				expr: &seqExpr{
					pos: position{line: 164, col: 5, offset: 3464},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 164, col: 5, offset: 3464},
							val:        ",",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 164, col: 13, offset: 3472},
							label: "arg",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 17, offset: 3476},
								name: "Property",
							},
						},
					},
				},
			},
		},
		{
			name: "Property",
			pos:  position{line: 168, col: 1, offset: 3516},
			expr: &actionExpr{
				pos: position{line: 169, col: 5, offset: 3529},
				run: (*parser).callonProperty1,
				expr: &seqExpr{
					pos: position{line: 169, col: 5, offset: 3529},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 169, col: 5, offset: 3529},
							label: "key",
							expr: &actionExpr{
								pos: position{line: 460, col: 5, offset: 8638},
								run: (*parser).callonProperty4,
								expr: &seqExpr{
									pos: position{line: 460, col: 5, offset: 8638},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 460, col: 5, offset: 8638},
											val:        "[_\\pL]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 460, col: 11, offset: 8644},
											expr: &charClassMatcher{
												pos:        position{line: 460, col: 11, offset: 8644},
												val:        "[_0-9\\pL]",
												chars:      []rune{'_'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 169, col: 24, offset: 3548},
							val:        ":",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 169, col: 31, offset: 3555},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 37, offset: 3561},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 180, col: 1, offset: 3811},
			expr: &ruleRefExpr{
				pos:  position{line: 181, col: 5, offset: 3820},
				name: "LogicalExpression",
			},
		},
		{
			name: "LogicalExpression",
			pos:  position{line: 188, col: 1, offset: 3921},
			expr: &actionExpr{
				pos: position{line: 189, col: 5, offset: 3943},
				run: (*parser).callonLogicalExpression1,
				expr: &seqExpr{
					pos: position{line: 189, col: 5, offset: 3943},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 189, col: 5, offset: 3943},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 189, col: 10, offset: 3948},
								name: "Equality",
							},
						},
						&labeledExpr{
							pos:   position{line: 189, col: 19, offset: 3957},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 189, col: 24, offset: 3962},
								expr: &seqExpr{
									pos: position{line: 189, col: 26, offset: 3964},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 468, col: 5, offset: 8728},
											expr: &choiceExpr{
												pos: position{line: 468, col: 7, offset: 8730},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 474, col: 5, offset: 8791},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 471, col: 5, offset: 8765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 471, col: 5, offset: 8765},
																val:        "//",
																ignoreCase: false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 471, col: 10, offset: 8770},
																expr: &charClassMatcher{
																	pos:        position{line: 471, col: 10, offset: 8770},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 480, col: 5, offset: 8837},
																val:        "\n",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 184, col: 5, offset: 3860},
											run: (*parser).callonLogicalExpression16,
											expr: &choiceExpr{
												pos: position{line: 184, col: 6, offset: 3861},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 184, col: 6, offset: 3861},
														val:        "or",
														ignoreCase: true,
													},
													&litMatcher{
														pos:        position{line: 184, col: 14, offset: 3869},
														val:        "and",
														ignoreCase: true,
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 468, col: 5, offset: 8728},
											expr: &choiceExpr{
												pos: position{line: 468, col: 7, offset: 8730},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 474, col: 5, offset: 8791},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 471, col: 5, offset: 8765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 471, col: 5, offset: 8765},
																val:        "//",
																ignoreCase: false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 471, col: 10, offset: 8770},
																expr: &charClassMatcher{
																	pos:        position{line: 471, col: 10, offset: 8770},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 480, col: 5, offset: 8837},
																val:        "\n",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 189, col: 51, offset: 3989},
											name: "Equality",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Equality",
			pos:  position{line: 198, col: 1, offset: 4157},
			expr: &actionExpr{
				pos: position{line: 199, col: 5, offset: 4170},
				run: (*parser).callonEquality1,
				expr: &seqExpr{
					pos: position{line: 199, col: 5, offset: 4170},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 199, col: 5, offset: 4170},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 199, col: 10, offset: 4175},
								name: "Relational",
							},
						},
						&labeledExpr{
							pos:   position{line: 199, col: 21, offset: 4186},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 199, col: 26, offset: 4191},
								expr: &seqExpr{
									pos: position{line: 199, col: 28, offset: 4193},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 468, col: 5, offset: 8728},
											expr: &choiceExpr{
												pos: position{line: 468, col: 7, offset: 8730},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 474, col: 5, offset: 8791},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 471, col: 5, offset: 8765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 471, col: 5, offset: 8765},
																val:        "//",
																ignoreCase: false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 471, col: 10, offset: 8770},
																expr: &charClassMatcher{
																	pos:        position{line: 471, col: 10, offset: 8770},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 480, col: 5, offset: 8837},
																val:        "\n",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 194, col: 5, offset: 4090},
											run: (*parser).callonEquality16,
											expr: &choiceExpr{
												pos: position{line: 194, col: 6, offset: 4091},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 194, col: 6, offset: 4091},
														val:        "==",
														ignoreCase: false,
													},
													&litMatcher{
														pos:        position{line: 194, col: 13, offset: 4098},
														val:        "!=",
														ignoreCase: false,
													},
													&litMatcher{
														pos:        position{line: 194, col: 20, offset: 4105},
														val:        "=~",
														ignoreCase: false,
													},
													&litMatcher{
														pos:        position{line: 194, col: 27, offset: 4112},
														val:        "!~",
														ignoreCase: false,
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 468, col: 5, offset: 8728},
											expr: &choiceExpr{
												pos: position{line: 468, col: 7, offset: 8730},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 474, col: 5, offset: 8791},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 471, col: 5, offset: 8765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 471, col: 5, offset: 8765},
																val:        "//",
																ignoreCase: false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 471, col: 10, offset: 8770},
																expr: &charClassMatcher{
																	pos:        position{line: 471, col: 10, offset: 8770},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 480, col: 5, offset: 8837},
																val:        "\n",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 199, col: 52, offset: 4217},
											name: "Relational",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Relational",
			pos:  position{line: 216, col: 1, offset: 4490},
			expr: &actionExpr{
				pos: position{line: 217, col: 5, offset: 4505},
				run: (*parser).callonRelational1,
				expr: &seqExpr{
					pos: position{line: 217, col: 5, offset: 4505},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 217, col: 5, offset: 4505},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 10, offset: 4510},
								name: "Additive",
							},
						},
						&labeledExpr{
							pos:   position{line: 217, col: 19, offset: 4519},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 217, col: 24, offset: 4524},
								expr: &seqExpr{
									pos: position{line: 217, col: 26, offset: 4526},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 468, col: 5, offset: 8728},
											expr: &choiceExpr{
												pos: position{line: 468, col: 7, offset: 8730},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 474, col: 5, offset: 8791},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 471, col: 5, offset: 8765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 471, col: 5, offset: 8765},
																val:        "//",
																ignoreCase: false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 471, col: 10, offset: 8770},
																expr: &charClassMatcher{
																	pos:        position{line: 471, col: 10, offset: 8770},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 480, col: 5, offset: 8837},
																val:        "\n",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 204, col: 5, offset: 4321},
											run: (*parser).callonRelational16,
											expr: &choiceExpr{
												pos: position{line: 204, col: 9, offset: 4325},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 204, col: 9, offset: 4325},
														val:        "<=",
														ignoreCase: false,
													},
													&litMatcher{
														pos:        position{line: 205, col: 9, offset: 4338},
														val:        "<",
														ignoreCase: false,
													},
													&litMatcher{
														pos:        position{line: 206, col: 9, offset: 4350},
														val:        ">=",
														ignoreCase: false,
													},
													&litMatcher{
														pos:        position{line: 207, col: 9, offset: 4363},
														val:        ">",
														ignoreCase: false,
													},
													&litMatcher{
														pos:        position{line: 208, col: 9, offset: 4375},
														val:        "startswith",
														ignoreCase: true,
													},
													&litMatcher{
														pos:        position{line: 209, col: 9, offset: 4397},
														val:        "in",
														ignoreCase: true,
													},
													&litMatcher{
														pos:        position{line: 210, col: 9, offset: 4411},
														val:        "not empty",
														ignoreCase: true,
													},
													&litMatcher{
														pos:        position{line: 211, col: 9, offset: 4432},
														val:        "empty",
														ignoreCase: true,
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 468, col: 5, offset: 8728},
											expr: &choiceExpr{
												pos: position{line: 468, col: 7, offset: 8730},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 474, col: 5, offset: 8791},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 471, col: 5, offset: 8765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 471, col: 5, offset: 8765},
																val:        "//",
																ignoreCase: false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 471, col: 10, offset: 8770},
																expr: &charClassMatcher{
																	pos:        position{line: 471, col: 10, offset: 8770},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 480, col: 5, offset: 8837},
																val:        "\n",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 217, col: 52, offset: 4552},
											name: "Additive",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Additive",
			pos:  position{line: 226, col: 1, offset: 4706},
			expr: &actionExpr{
				pos: position{line: 227, col: 5, offset: 4719},
				run: (*parser).callonAdditive1,
				expr: &seqExpr{
					pos: position{line: 227, col: 5, offset: 4719},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 227, col: 5, offset: 4719},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 10, offset: 4724},
								name: "Multiplicative",
							},
						},
						&labeledExpr{
							pos:   position{line: 227, col: 25, offset: 4739},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 227, col: 30, offset: 4744},
								expr: &seqExpr{
									pos: position{line: 227, col: 32, offset: 4746},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 468, col: 5, offset: 8728},
											expr: &choiceExpr{
												pos: position{line: 468, col: 7, offset: 8730},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 474, col: 5, offset: 8791},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 471, col: 5, offset: 8765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 471, col: 5, offset: 8765},
																val:        "//",
																ignoreCase: false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 471, col: 10, offset: 8770},
																expr: &charClassMatcher{
																	pos:        position{line: 471, col: 10, offset: 8770},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 480, col: 5, offset: 8837},
																val:        "\n",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 222, col: 5, offset: 4651},
											run: (*parser).callonAdditive16,
											expr: &charClassMatcher{
												pos:        position{line: 222, col: 6, offset: 4652},
												val:        "[+-]",
												chars:      []rune{'+', '-'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 468, col: 5, offset: 8728},
											expr: &choiceExpr{
												pos: position{line: 468, col: 7, offset: 8730},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 474, col: 5, offset: 8791},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 471, col: 5, offset: 8765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 471, col: 5, offset: 8765},
																val:        "//",
																ignoreCase: false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 471, col: 10, offset: 8770},
																expr: &charClassMatcher{
																	pos:        position{line: 471, col: 10, offset: 8770},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 480, col: 5, offset: 8837},
																val:        "\n",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 227, col: 55, offset: 4769},
											name: "Multiplicative",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Multiplicative",
			pos:  position{line: 236, col: 1, offset: 4931},
			expr: &actionExpr{
				pos: position{line: 237, col: 5, offset: 4950},
				run: (*parser).callonMultiplicative1,
				expr: &seqExpr{
					pos: position{line: 237, col: 5, offset: 4950},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 237, col: 5, offset: 4950},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 10, offset: 4955},
								name: "UnaryExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 26, offset: 4971},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 237, col: 31, offset: 4976},
								expr: &seqExpr{
									pos: position{line: 237, col: 33, offset: 4978},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 468, col: 5, offset: 8728},
											expr: &choiceExpr{
												pos: position{line: 468, col: 7, offset: 8730},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 474, col: 5, offset: 8791},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 471, col: 5, offset: 8765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 471, col: 5, offset: 8765},
																val:        "//",
																ignoreCase: false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 471, col: 10, offset: 8770},
																expr: &charClassMatcher{
																	pos:        position{line: 471, col: 10, offset: 8770},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 480, col: 5, offset: 8837},
																val:        "\n",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 232, col: 5, offset: 4880},
											run: (*parser).callonMultiplicative16,
											expr: &charClassMatcher{
												pos:        position{line: 232, col: 6, offset: 4881},
												val:        "[*/]",
												chars:      []rune{'*', '/'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 468, col: 5, offset: 8728},
											expr: &choiceExpr{
												pos: position{line: 468, col: 7, offset: 8730},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 474, col: 5, offset: 8791},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
													&seqExpr{
														pos: position{line: 471, col: 5, offset: 8765},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 471, col: 5, offset: 8765},
																val:        "//",
																ignoreCase: false,
															},
															&zeroOrMoreExpr{
																pos: position{line: 471, col: 10, offset: 8770},
																expr: &charClassMatcher{
																	pos:        position{line: 471, col: 10, offset: 8770},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 480, col: 5, offset: 8837},
																val:        "\n",
																ignoreCase: false,
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 237, col: 62, offset: 5007},
											name: "UnaryExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnaryExpression",
			pos:  position{line: 246, col: 1, offset: 5163},
			expr: &choiceExpr{
				pos: position{line: 247, col: 5, offset: 5183},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 247, col: 5, offset: 5183},
						run: (*parser).callonUnaryExpression2,
						expr: &seqExpr{
							pos: position{line: 247, col: 5, offset: 5183},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 247, col: 8, offset: 5186},
									label: "op",
									expr: &actionExpr{
										pos: position{line: 242, col: 5, offset: 5110},
										run: (*parser).callonUnaryExpression13,
										expr: &choiceExpr{
											pos: position{line: 242, col: 6, offset: 5111},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 242, col: 6, offset: 5111},
													val:        "-",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 242, col: 12, offset: 5117},
													val:        "not",
													ignoreCase: false,
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 247, col: 28, offset: 5206},
									label: "argument",
									expr: &ruleRefExpr{
										pos:  position{line: 247, col: 37, offset: 5215},
										name: "Primary",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 5296},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 252, col: 1, offset: 5305},
			expr: &choiceExpr{
				pos: position{line: 253, col: 5, offset: 5317},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 253, col: 5, offset: 5317},
						name: "PipeExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 5336},
						name: "Array",
					},
					&actionExpr{
						pos: position{line: 378, col: 5, offset: 7123},
						run: (*parser).callonPrimary4,
						expr: &seqExpr{
							pos: position{line: 378, col: 7, offset: 7125},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 378, col: 7, offset: 7125},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 378, col: 11, offset: 7129},
									expr: &choiceExpr{
										pos: position{line: 386, col: 5, offset: 7338},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 386, col: 5, offset: 7338},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 386, col: 5, offset: 7338},
														expr: &charClassMatcher{
															pos:        position{line: 386, col: 8, offset: 7341},
															val:        "[\"\\\\\\n]",
															chars:      []rune{'"', '\\', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&anyMatcher{
														line: 466, col: 5, offset: 8719,
													},
												},
											},
											&seqExpr{
												pos: position{line: 387, col: 5, offset: 7375},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 387, col: 5, offset: 7375},
														val:        "\\",
														ignoreCase: false,
													},
													&choiceExpr{
														pos: position{line: 390, col: 5, offset: 7423},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 390, col: 5, offset: 7423},
																val:        "\"",
																ignoreCase: false,
															},
															&actionExpr{
																pos: position{line: 391, col: 5, offset: 7431},
																run: (*parser).callonPrimary17,
																expr: &choiceExpr{
																	pos: position{line: 391, col: 7, offset: 7433},
																	alternatives: []interface{}{
																		&anyMatcher{
																			line: 466, col: 5, offset: 8719,
																		},
																		&litMatcher{
																			pos:        position{line: 480, col: 5, offset: 8837},
																			val:        "\n",
																			ignoreCase: false,
																		},
																		&notExpr{
																			pos: position{line: 483, col: 5, offset: 8851},
																			expr: &anyMatcher{
																				line: 483, col: 6, offset: 8852,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 378, col: 29, offset: 7147},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 381, col: 5, offset: 7207},
						run: (*parser).callonPrimary24,
						expr: &seqExpr{
							pos: position{line: 381, col: 7, offset: 7209},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 381, col: 7, offset: 7209},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 381, col: 11, offset: 7213},
									expr: &choiceExpr{
										pos: position{line: 386, col: 5, offset: 7338},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 386, col: 5, offset: 7338},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 386, col: 5, offset: 7338},
														expr: &charClassMatcher{
															pos:        position{line: 386, col: 8, offset: 7341},
															val:        "[\"\\\\\\n]",
															chars:      []rune{'"', '\\', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&anyMatcher{
														line: 466, col: 5, offset: 8719,
													},
												},
											},
											&seqExpr{
												pos: position{line: 387, col: 5, offset: 7375},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 387, col: 5, offset: 7375},
														val:        "\\",
														ignoreCase: false,
													},
													&choiceExpr{
														pos: position{line: 390, col: 5, offset: 7423},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 390, col: 5, offset: 7423},
																val:        "\"",
																ignoreCase: false,
															},
															&actionExpr{
																pos: position{line: 391, col: 5, offset: 7431},
																run: (*parser).callonPrimary37,
																expr: &choiceExpr{
																	pos: position{line: 391, col: 7, offset: 7433},
																	alternatives: []interface{}{
																		&anyMatcher{
																			line: 466, col: 5, offset: 8719,
																		},
																		&litMatcher{
																			pos:        position{line: 480, col: 5, offset: 8837},
																			val:        "\n",
																			ignoreCase: false,
																		},
																		&notExpr{
																			pos: position{line: 483, col: 5, offset: 8851},
																			expr: &anyMatcher{
																				line: 483, col: 6, offset: 8852,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 381, col: 31, offset: 7233},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 480, col: 5, offset: 8837},
											val:        "\n",
											ignoreCase: false,
										},
										&notExpr{
											pos: position{line: 483, col: 5, offset: 8851},
											expr: &anyMatcher{
												line: 483, col: 6, offset: 8852,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 426, col: 5, offset: 8041},
						run: (*parser).callonPrimary47,
						expr: &seqExpr{
							pos: position{line: 426, col: 5, offset: 8041},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 426, col: 8, offset: 8044},
									val:        "true",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 429, col: 5, offset: 8115},
						run: (*parser).callonPrimary66,
						expr: &seqExpr{
							pos: position{line: 429, col: 5, offset: 8115},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 429, col: 8, offset: 8118},
									val:        "false",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 468, col: 5, offset: 8728},
									expr: &choiceExpr{
										pos: position{line: 468, col: 7, offset: 8730},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 474, col: 5, offset: 8791},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
											&seqExpr{
												pos: position{line: 471, col: 5, offset: 8765},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 471, col: 5, offset: 8765},
														val:        "//",
														ignoreCase: false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 471, col: 10, offset: 8770},
														expr: &charClassMatcher{
															pos:        position{line: 471, col: 10, offset: 8770},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&litMatcher{
														pos:        position{line: 480, col: 5, offset: 8837},
														val:        "\n",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 397, col: 5, offset: 7543},
						run: (*parser).callonPrimary85,
						expr: &seqExpr{
							pos: position{line: 397, col: 5, offset: 7543},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 397, col: 5, offset: 7543},
									val:        "/",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 397, col: 9, offset: 7547},
									label: "pattern",
									expr: &actionExpr{
										pos: position{line: 402, col: 5, offset: 7624},
										run: (*parser).callonPrimary89,
										expr: &labeledExpr{
											pos:   position{line: 402, col: 5, offset: 7624},
											label: "chars",
											expr: &oneOrMoreExpr{
												pos: position{line: 402, col: 11, offset: 7630},
												expr: &choiceExpr{
													pos: position{line: 407, col: 5, offset: 7714},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 407, col: 5, offset: 7714},
															run: (*parser).callonPrimary93,
															expr: &seqExpr{
																pos: position{line: 407, col: 5, offset: 7714},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 407, col: 5, offset: 7714},
																		expr: &charClassMatcher{
																			pos:        position{line: 407, col: 6, offset: 7715},
																			val:        "[\\\\/]",
																			chars:      []rune{'\\', '/'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 407, col: 12, offset: 7721},
																		label: "re",
																		expr: &actionExpr{
																			pos: position{line: 421, col: 5, offset: 7961},
																			run: (*parser).callonPrimary98,
																			expr: &seqExpr{
																				pos: position{line: 421, col: 5, offset: 7961},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 421, col: 5, offset: 7961},
																						expr: &charClassMatcher{
																							pos:        position{line: 477, col: 5, offset: 8821},
																							val:        "[\\n\\r]",
																							chars:      []rune{'\n', '\r'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&anyMatcher{
																						line: 466, col: 5, offset: 8719,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 413, col: 5, offset: 7830},
															run: (*parser).callonPrimary103,
															expr: &litMatcher{
																pos:        position{line: 413, col: 5, offset: 7830},
																val:        "\\/",
																ignoreCase: false,
															},
														},
														&actionExpr{
															pos: position{line: 416, col: 5, offset: 7878},
															run: (*parser).callonPrimary105,
															expr: &seqExpr{
																pos: position{line: 416, col: 5, offset: 7878},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 416, col: 5, offset: 7878},
																		val:        "\\",
																		ignoreCase: false,
																	},
																	&actionExpr{
																		pos: position{line: 421, col: 5, offset: 7961},
																		run: (*parser).callonPrimary108,
																		expr: &seqExpr{
																			pos: position{line: 421, col: 5, offset: 7961},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 421, col: 5, offset: 7961},
																					expr: &charClassMatcher{
																						pos:        position{line: 477, col: 5, offset: 8821},
																						val:        "[\\n\\r]",
																						chars:      []rune{'\n', '\r'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&anyMatcher{
																					line: 466, col: 5, offset: 8719,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 397, col: 28, offset: 7566},
									val:        "/",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 453, col: 5, offset: 8452},
						run: (*parser).callonPrimary114,
						expr: &litMatcher{
							pos:        position{line: 453, col: 5, offset: 8452},
							val:        "<-",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 373, col: 5, offset: 7036},
						run: (*parser).callonPrimary116,
						expr: &oneOrMoreExpr{
							pos: position{line: 373, col: 5, offset: 7036},
							expr: &seqExpr{
								pos: position{line: 370, col: 5, offset: 6993},
								exprs: []interface{}{
									&choiceExpr{
										pos: position{line: 439, col: 6, offset: 8288},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 439, col: 6, offset: 8288},
												val:        "0",
												ignoreCase: false,
											},
											&seqExpr{
												pos: position{line: 439, col: 12, offset: 8294},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 447, col: 5, offset: 8412},
														val:        "[1-9]",
														ranges:     []rune{'1', '9'},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 439, col: 25, offset: 8307},
														expr: &charClassMatcher{
															pos:        position{line: 450, col: 5, offset: 8429},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&choiceExpr{
										pos: position{line: 361, col: 9, offset: 6843},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 342, col: 5, offset: 6676},
												val:        "ns",
												ignoreCase: false,
											},
											&litMatcher{
												pos:        position{line: 345, col: 6, offset: 6704},
												val:        "us",
												ignoreCase: false,
											},
											&litMatcher{
												pos:        position{line: 345, col: 13, offset: 6711},
												val:        "µs",
												ignoreCase: false,
											},
											&litMatcher{
												pos:        position{line: 345, col: 20, offset: 6719},
												val:        "μs",
												ignoreCase: false,
											},
											&litMatcher{
												pos:        position{line: 348, col: 5, offset: 6748},
												val:        "ms",
												ignoreCase: false,
											},
											&charClassMatcher{
												pos:        position{line: 351, col: 5, offset: 6770},
												val:        "[smh]",
												chars:      []rune{'s', 'm', 'h'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 337, col: 5, offset: 6588},
						run: (*parser).callonPrimary132,
						expr: &seqExpr{
							pos: position{line: 337, col: 5, offset: 6588},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 331, col: 18, offset: 6503},
									val:        "-",
									ignoreCase: false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 331, col: 32, offset: 6517},
									val:        "-",
									ignoreCase: false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 337, col: 14, offset: 6597},
									val:        "T",
									ignoreCase: false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 328, col: 14, offset: 6433},
									val:        ":",
									ignoreCase: false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 328, col: 29, offset: 6448},
									val:        ":",
									ignoreCase: false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 450, col: 5, offset: 8429},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrOneExpr{
									pos: position{line: 328, col: 44, offset: 6463},
									expr: &seqExpr{
										pos: position{line: 319, col: 5, offset: 6303},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 319, col: 5, offset: 6303},
												val:        ".",
												ignoreCase: false,
											},
											&oneOrMoreExpr{
												pos: position{line: 319, col: 9, offset: 6307},
												expr: &charClassMatcher{
													pos:        position{line: 450, col: 5, offset: 8429},
													val:        "[0-9]",
													ranges:     []rune{'0', '9'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 325, col: 6, offset: 6386},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 325, col: 6, offset: 6386},
											val:        "Z",
											ignoreCase: false,
										},
										&seqExpr{
											pos: position{line: 322, col: 5, offset: 6333},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 322, col: 6, offset: 6334},
													val:        "[+-]",
													chars:      []rune{'+', '-'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 450, col: 5, offset: 8429},
													val:        "[0-9]",
													ranges:     []rune{'0', '9'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 450, col: 5, offset: 8429},
													val:        "[0-9]",
													ranges:     []rune{'0', '9'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 322, col: 26, offset: 6354},
													val:        ":",
													ignoreCase: false,
												},
												&charClassMatcher{
													pos:        position{line: 450, col: 5, offset: 8429},
													val:        "[0-9]",
													ranges:     []rune{'0', '9'},
													ignoreCase: false,
													inverted:   false,
												},
												&charClassMatcher{
													pos:        position{line: 450, col: 5, offset: 8429},
													val:        "[0-9]",
													ranges:     []rune{'0', '9'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 434, col: 5, offset: 8206},
						run: (*parser).callonPrimary167,
						expr: &seqExpr{
							pos: position{line: 434, col: 5, offset: 8206},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 439, col: 6, offset: 8288},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 439, col: 6, offset: 8288},
											val:        "0",
											ignoreCase: false,
										},
										&seqExpr{
											pos: position{line: 439, col: 12, offset: 8294},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 447, col: 5, offset: 8412},
													val:        "[1-9]",
													ranges:     []rune{'1', '9'},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 439, col: 25, offset: 8307},
													expr: &charClassMatcher{
														pos:        position{line: 450, col: 5, offset: 8429},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 434, col: 13, offset: 8214},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 434, col: 17, offset: 8218},
									expr: &charClassMatcher{
										pos:        position{line: 450, col: 5, offset: 8429},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 442, col: 5, offset: 8335},
						run: (*parser).callonPrimary178,
						expr: &choiceExpr{
							pos: position{line: 439, col: 6, offset: 8288},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 439, col: 6, offset: 8288},
									val:        "0",
									ignoreCase: false,
								},
								&seqExpr{
									pos: position{line: 439, col: 12, offset: 8294},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 447, col: 5, offset: 8412},
											val:        "[1-9]",
											ranges:     []rune{'1', '9'},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 439, col: 25, offset: 8307},
											expr: &charClassMatcher{
												pos:        position{line: 450, col: 5, offset: 8429},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 5358},
						name: "CallExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 257, col: 5, offset: 5377},
						name: "MemberExpressions",
					},
					&actionExpr{
						pos: position{line: 460, col: 5, offset: 8638},
						run: (*parser).callonPrimary187,
						expr: &seqExpr{
							pos: position{line: 460, col: 5, offset: 8638},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 460, col: 5, offset: 8638},
									val:        "[_\\pL]",
									chars:      []rune{'_'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 460, col: 11, offset: 8644},
									expr: &charClassMatcher{
										pos:        position{line: 460, col: 11, offset: 8644},
										val:        "[_0-9\\pL]",
										chars:      []rune{'_'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 259, col: 5, offset: 5414},
						name: "ObjectExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 260, col: 5, offset: 5435},
						name: "ArrowFunctionExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 261, col: 5, offset: 5463},
						name: "Parens",
					},
				},
			},
		},
		{
			name: "Parens",
			pos:  position{line: 273, col: 1, offset: 5628},
			expr: &actionExpr{
				pos: position{line: 274, col: 5, offset: 5639},
				run: (*parser).callonParens1,
				expr: &seqExpr{
					pos: position{line: 274, col: 5, offset: 5639},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 274, col: 5, offset: 5639},
							val:        "(",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 274, col: 12, offset: 5646},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 274, col: 17, offset: 5651},
								name: "Expr",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 274, col: 25, offset: 5659},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 278, col: 1, offset: 5695},
			expr: &actionExpr{
				pos: position{line: 279, col: 5, offset: 5705},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 279, col: 5, offset: 5705},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 279, col: 5, offset: 5705},
							val:        "[",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 279, col: 12, offset: 5712},
							label: "elements",
							expr: &zeroOrOneExpr{
								pos: position{line: 279, col: 21, offset: 5721},
								expr: &ruleRefExpr{
									pos:  position{line: 279, col: 21, offset: 5721},
									name: "ArrayElements",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 279, col: 39, offset: 5739},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ArrayElements",
			pos:  position{line: 283, col: 1, offset: 5779},
			expr: &actionExpr{
				pos: position{line: 284, col: 5, offset: 5797},
				run: (*parser).callonArrayElements1,
				expr: &seqExpr{
					pos: position{line: 284, col: 5, offset: 5797},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 284, col: 5, offset: 5797},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 11, offset: 5803},
								name: "Primary",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 284, col: 22, offset: 5814},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 284, col: 27, offset: 5819},
								expr: &ruleRefExpr{
									pos:  position{line: 284, col: 27, offset: 5819},
									name: "ArrayRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ArrayRest",
			pos:  position{line: 288, col: 1, offset: 5891},
			expr: &actionExpr{
				pos: position{line: 289, col: 5, offset: 5905},
				run: (*parser).callonArrayRest1,
				expr: &seqExpr{
					pos: position{line: 289, col: 5, offset: 5905},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 289, col: 5, offset: 5905},
							val:        ",",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 468, col: 5, offset: 8728},
							expr: &choiceExpr{
								pos: position{line: 468, col: 7, offset: 8730},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 474, col: 5, offset: 8791},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
									&seqExpr{
										pos: position{line: 471, col: 5, offset: 8765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 471, col: 5, offset: 8765},
												val:        "//",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 471, col: 10, offset: 8770},
												expr: &charClassMatcher{
													pos:        position{line: 471, col: 10, offset: 8770},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 480, col: 5, offset: 8837},
												val:        "\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 289, col: 12, offset: 5912},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 20, offset: 5920},
								name: "Primary",
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onStart1(program interface{}) (interface{}, error) {
	return program, nil

}

func (p *parser) callonStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart1(stack["program"])
}

func (c *current) onProgram1(body interface{}) (interface{}, error) {
	return program(body, c.text, c.pos)

}

func (p *parser) callonProgram1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProgram1(stack["body"])
}

func (c *current) onSourceElements1(head, tail interface{}) (interface{}, error) {
	return srcElems(head, tail)

}

func (p *parser) callonSourceElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceElements1(stack["head"], stack["tail"])
}

func (c *current) onVariableStatement1(declaration interface{}) (interface{}, error) {
	return varstmt(declaration, c.text, c.pos)

}

func (p *parser) callonVariableStatement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariableStatement1(stack["declaration"])
}

func (c *current) onReturnStatement1(argument interface{}) (interface{}, error) {
	return returnstmt(argument, c.text, c.pos)

}

func (p *parser) callonReturnStatement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReturnStatement1(stack["argument"])
}

func (c *current) onExpressionStatement1(expr interface{}) (interface{}, error) {
	return exprstmt(expr, c.text, c.pos)

}

func (p *parser) callonExpressionStatement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionStatement1(stack["expr"])
}

func (c *current) onBlockStatement1(body interface{}) (interface{}, error) {
	return blockstmt(body, c.text, c.pos)

}

func (p *parser) callonBlockStatement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockStatement1(stack["body"])
}

func (c *current) onVariableDeclaration4() (interface{}, error) {
	return identifier(c.text, c.pos)

}

func (p *parser) callonVariableDeclaration4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariableDeclaration4()
}

func (c *current) onVariableDeclaration1(id, init interface{}) (interface{}, error) {
	return vardecl(id, init, c.text, c.pos)

}

func (p *parser) callonVariableDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariableDeclaration1(stack["id"], stack["init"])
}

func (c *current) onMemberExpressions4() (interface{}, error) {
	return identifier(c.text, c.pos)

}

func (p *parser) callonMemberExpressions4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMemberExpressions4()
}

func (c *current) onMemberExpressions11(property interface{}) (interface{}, error) {
	return property, nil

}

func (p *parser) callonMemberExpressions11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMemberExpressions11(stack["property"])
}

func (c *current) onMemberExpressions1(head, tail interface{}) (interface{}, error) {
	return memberexprs(head, tail, c.text, c.pos)

}

func (p *parser) callonMemberExpressions1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMemberExpressions1(stack["head"], stack["tail"])
}

func (c *current) onMemberExpressionProperty14() (interface{}, error) {
	return identifier(c.text, c.pos)

}

func (p *parser) callonMemberExpressionProperty14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMemberExpressionProperty14()
}

func (c *current) onMemberExpressionProperty2(property interface{}) (interface{}, error) {
	return property, nil

}

func (p *parser) callonMemberExpressionProperty2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMemberExpressionProperty2(stack["property"])
}

func (c *current) onMemberExpressionProperty19(property interface{}) (interface{}, error) {
	return property, nil

}

func (p *parser) callonMemberExpressionProperty19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMemberExpressionProperty19(stack["property"])
}

func (c *current) onCallExpression4(callee, args interface{}) (interface{}, error) {
	return callexpr(callee, args, c.text, c.pos)

}

func (p *parser) callonCallExpression4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallExpression4(stack["callee"], stack["args"])
}

func (c *current) onCallExpression21(args interface{}) (interface{}, error) {
	return callexpr(nil, args, c.text, c.pos)

}

func (p *parser) callonCallExpression21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallExpression21(stack["args"])
}

func (c *current) onCallExpression33(property interface{}) (interface{}, error) {
	return memberexpr(nil, property, c.text, c.pos)

}

func (p *parser) callonCallExpression33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallExpression33(stack["property"])
}

func (c *current) onCallExpression1(head, tail interface{}) (interface{}, error) {
	return callexprs(head, tail, c.text, c.pos)

}

func (p *parser) callonCallExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallExpression1(stack["head"], stack["tail"])
}

func (c *current) onPipeExpression1(head, tail interface{}) (interface{}, error) {
	return pipeExprs(head, tail, c.text, c.pos)

}

func (p *parser) callonPipeExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpression1(stack["head"], stack["tail"])
}

func (c *current) onPipeExpressionHead16() (interface{}, error) {
	return nil, errors.New("invalid escape character")

}

func (p *parser) callonPipeExpressionHead16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead16()
}

func (c *current) onPipeExpressionHead3() (interface{}, error) {
	return stringLiteral(c.text, c.pos)

}

func (p *parser) callonPipeExpressionHead3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead3()
}

func (c *current) onPipeExpressionHead36() (interface{}, error) {
	return nil, errors.New("invalid escape character")

}

func (p *parser) callonPipeExpressionHead36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead36()
}

func (c *current) onPipeExpressionHead23() (interface{}, error) {
	return "", errors.New("string literal not terminated")

}

func (p *parser) callonPipeExpressionHead23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead23()
}

func (c *current) onPipeExpressionHead46() (interface{}, error) {
	return booleanLiteral(true, c.text, c.pos)

}

func (p *parser) callonPipeExpressionHead46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead46()
}

func (c *current) onPipeExpressionHead65() (interface{}, error) {
	return booleanLiteral(false, c.text, c.pos)

}

func (p *parser) callonPipeExpressionHead65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead65()
}

func (c *current) onPipeExpressionHead97() (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonPipeExpressionHead97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead97()
}

func (c *current) onPipeExpressionHead92(re interface{}) (interface{}, error) {
	return re, nil

}

func (p *parser) callonPipeExpressionHead92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead92(stack["re"])
}

func (c *current) onPipeExpressionHead102() (interface{}, error) {
	return []byte{'/'}, nil

}

func (p *parser) callonPipeExpressionHead102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead102()
}

func (c *current) onPipeExpressionHead107() (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonPipeExpressionHead107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead107()
}

func (c *current) onPipeExpressionHead104() (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonPipeExpressionHead104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead104()
}

func (c *current) onPipeExpressionHead88(chars interface{}) (interface{}, error) {
	return regexLiteral(chars, c.text, c.pos)

}

func (p *parser) callonPipeExpressionHead88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead88(stack["chars"])
}

func (c *current) onPipeExpressionHead84(pattern interface{}) (interface{}, error) {
	return pattern, nil

}

func (p *parser) callonPipeExpressionHead84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead84(stack["pattern"])
}

func (c *current) onPipeExpressionHead113() (interface{}, error) {
	return pipeLiteral(c.text, c.pos), nil

}

func (p *parser) callonPipeExpressionHead113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead113()
}

func (c *current) onPipeExpressionHead115() (interface{}, error) {
	return durationLiteral(c.text, c.pos)

}

func (p *parser) callonPipeExpressionHead115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead115()
}

func (c *current) onPipeExpressionHead131() (interface{}, error) {
	return datetime(c.text, c.pos)

}

func (p *parser) callonPipeExpressionHead131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead131()
}

func (c *current) onPipeExpressionHead166() (interface{}, error) {
	return numberLiteral(c.text, c.pos)

}

func (p *parser) callonPipeExpressionHead166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead166()
}

func (c *current) onPipeExpressionHead177() (interface{}, error) {
	return integerLiteral(c.text, c.pos)

}

func (p *parser) callonPipeExpressionHead177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead177()
}

func (c *current) onPipeExpressionHead186() (interface{}, error) {
	return identifier(c.text, c.pos)

}

func (p *parser) callonPipeExpressionHead186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionHead186()
}

func (c *current) onPipeExpressionPipe1(call interface{}) (interface{}, error) {
	return incompletePipeExpr(call, c.text, c.pos)

}

func (p *parser) callonPipeExpressionPipe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPipeExpressionPipe1(stack["call"])
}

func (c *current) onArguments1(args interface{}) (interface{}, error) {
	return args, nil

}

func (p *parser) callonArguments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArguments1(stack["args"])
}

func (c *current) onArrowFunctionExpression1(params, body interface{}) (interface{}, error) {
	return arrowfunc(params, body, c.text, c.pos), nil

}

func (p *parser) callonArrowFunctionExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowFunctionExpression1(stack["params"], stack["body"])
}

func (c *current) onArrowFunctionParams1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, toIfaceSlice(rest)...), nil

}

func (p *parser) callonArrowFunctionParams1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowFunctionParams1(stack["first"], stack["rest"])
}

func (c *current) onArrowFunctionParamsRest1(arg interface{}) (interface{}, error) {
	return arg, nil

}

func (p *parser) callonArrowFunctionParamsRest1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowFunctionParamsRest1(stack["arg"])
}

func (c *current) onArrowFunctionParam5() (interface{}, error) {
	return identifier(c.text, c.pos)

}

func (p *parser) callonArrowFunctionParam5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowFunctionParam5()
}

func (c *current) onArrowFunctionParam2(key, value interface{}) (interface{}, error) {
	return property(key, value, c.text, c.pos)

}

func (p *parser) callonArrowFunctionParam2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowFunctionParam2(stack["key"], stack["value"])
}

func (c *current) onArrowFunctionParam40() (interface{}, error) {
	return identifier(c.text, c.pos)

}

func (p *parser) callonArrowFunctionParam40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowFunctionParam40()
}

func (c *current) onArrowFunctionParam37(key interface{}) (interface{}, error) {
	return property(key, nil, c.text, c.pos)

}

func (p *parser) callonArrowFunctionParam37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowFunctionParam37(stack["key"])
}

func (c *current) onArrowFunctionBody2(body interface{}) (interface{}, error) {
	return body, nil

}

func (p *parser) callonArrowFunctionBody2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowFunctionBody2(stack["body"])
}

func (c *current) onArrowFunctionBody5(body interface{}) (interface{}, error) {
	return body, nil

}

func (p *parser) callonArrowFunctionBody5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrowFunctionBody5(stack["body"])
}

func (c *current) onObjectExpression1(object interface{}) (interface{}, error) {
	return object, nil

}

func (p *parser) callonObjectExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObjectExpression1(stack["object"])
}

func (c *current) onObjectProperties1(first, rest interface{}) (interface{}, error) {
	return objectexpr(first, rest, c.text, c.pos)

}

func (p *parser) callonObjectProperties1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObjectProperties1(stack["first"], stack["rest"])
}

func (c *current) onPropertiesRest1(arg interface{}) (interface{}, error) {
	return arg, nil

}

func (p *parser) callonPropertiesRest1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPropertiesRest1(stack["arg"])
}

func (c *current) onProperty4() (interface{}, error) {
	return identifier(c.text, c.pos)

}

func (p *parser) callonProperty4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProperty4()
}

func (c *current) onProperty1(key, value interface{}) (interface{}, error) {
	return property(key, value, c.text, c.pos)

}

func (p *parser) callonProperty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProperty1(stack["key"], stack["value"])
}

func (c *current) onLogicalExpression16() (interface{}, error) {
	return logicalOp(c.text)

}

func (p *parser) callonLogicalExpression16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalExpression16()
}

func (c *current) onLogicalExpression1(head, tail interface{}) (interface{}, error) {
	return logicalExpression(head, tail, c.text, c.pos)

}

func (p *parser) callonLogicalExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalExpression1(stack["head"], stack["tail"])
}

func (c *current) onEquality16() (interface{}, error) {
	return operator(c.text)

}

func (p *parser) callonEquality16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquality16()
}

func (c *current) onEquality1(head, tail interface{}) (interface{}, error) {
	return binaryExpression(head, tail, c.text, c.pos)

}

func (p *parser) callonEquality1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquality1(stack["head"], stack["tail"])
}

func (c *current) onRelational16() (interface{}, error) {
	return operator(c.text)

}

func (p *parser) callonRelational16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelational16()
}

func (c *current) onRelational1(head, tail interface{}) (interface{}, error) {
	return binaryExpression(head, tail, c.text, c.pos)

}

func (p *parser) callonRelational1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelational1(stack["head"], stack["tail"])
}

func (c *current) onAdditive16() (interface{}, error) {
	return operator(c.text)

}

func (p *parser) callonAdditive16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditive16()
}

func (c *current) onAdditive1(head, tail interface{}) (interface{}, error) {
	return binaryExpression(head, tail, c.text, c.pos)

}

func (p *parser) callonAdditive1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditive1(stack["head"], stack["tail"])
}

func (c *current) onMultiplicative16() (interface{}, error) {
	return operator(c.text)

}

func (p *parser) callonMultiplicative16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicative16()
}

func (c *current) onMultiplicative1(head, tail interface{}) (interface{}, error) {
	return binaryExpression(head, tail, c.text, c.pos)

}

func (p *parser) callonMultiplicative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicative1(stack["head"], stack["tail"])
}

func (c *current) onUnaryExpression13() (interface{}, error) {
	return operator(c.text)

}

func (p *parser) callonUnaryExpression13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnaryExpression13()
}

func (c *current) onUnaryExpression2(op, argument interface{}) (interface{}, error) {
	return unaryExpression(op, argument, c.text, c.pos)

}

func (p *parser) callonUnaryExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnaryExpression2(stack["op"], stack["argument"])
}

func (c *current) onPrimary17() (interface{}, error) {
	return nil, errors.New("invalid escape character")

}

func (p *parser) callonPrimary17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary17()
}

func (c *current) onPrimary4() (interface{}, error) {
	return stringLiteral(c.text, c.pos)

}

func (p *parser) callonPrimary4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary4()
}

func (c *current) onPrimary37() (interface{}, error) {
	return nil, errors.New("invalid escape character")

}

func (p *parser) callonPrimary37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary37()
}

func (c *current) onPrimary24() (interface{}, error) {
	return "", errors.New("string literal not terminated")

}

func (p *parser) callonPrimary24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary24()
}

func (c *current) onPrimary47() (interface{}, error) {
	return booleanLiteral(true, c.text, c.pos)

}

func (p *parser) callonPrimary47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary47()
}

func (c *current) onPrimary66() (interface{}, error) {
	return booleanLiteral(false, c.text, c.pos)

}

func (p *parser) callonPrimary66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary66()
}

func (c *current) onPrimary98() (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonPrimary98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary98()
}

func (c *current) onPrimary93(re interface{}) (interface{}, error) {
	return re, nil

}

func (p *parser) callonPrimary93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary93(stack["re"])
}

func (c *current) onPrimary103() (interface{}, error) {
	return []byte{'/'}, nil

}

func (p *parser) callonPrimary103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary103()
}

func (c *current) onPrimary108() (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonPrimary108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary108()
}

func (c *current) onPrimary105() (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonPrimary105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary105()
}

func (c *current) onPrimary89(chars interface{}) (interface{}, error) {
	return regexLiteral(chars, c.text, c.pos)

}

func (p *parser) callonPrimary89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary89(stack["chars"])
}

func (c *current) onPrimary85(pattern interface{}) (interface{}, error) {
	return pattern, nil

}

func (p *parser) callonPrimary85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary85(stack["pattern"])
}

func (c *current) onPrimary114() (interface{}, error) {
	return pipeLiteral(c.text, c.pos), nil

}

func (p *parser) callonPrimary114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary114()
}

func (c *current) onPrimary116() (interface{}, error) {
	return durationLiteral(c.text, c.pos)

}

func (p *parser) callonPrimary116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary116()
}

func (c *current) onPrimary132() (interface{}, error) {
	return datetime(c.text, c.pos)

}

func (p *parser) callonPrimary132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary132()
}

func (c *current) onPrimary167() (interface{}, error) {
	return numberLiteral(c.text, c.pos)

}

func (p *parser) callonPrimary167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary167()
}

func (c *current) onPrimary178() (interface{}, error) {
	return integerLiteral(c.text, c.pos)

}

func (p *parser) callonPrimary178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary178()
}

func (c *current) onPrimary187() (interface{}, error) {
	return identifier(c.text, c.pos)

}

func (p *parser) callonPrimary187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary187()
}

func (c *current) onParens1(expr interface{}) (interface{}, error) {
	return expr, nil

}

func (p *parser) callonParens1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParens1(stack["expr"])
}

func (c *current) onArray1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elements"])
}

func (c *current) onArrayElements1(first, rest interface{}) (interface{}, error) {
	return array(first, rest, c.text, c.pos), nil

}

func (p *parser) callonArrayElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayElements1(stack["first"], stack["rest"])
}

func (c *current) onArrayRest1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonArrayRest1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayRest1(stack["element"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// the globalStore allows the parser to store arbitrary values
	globalStore map[string]interface{}
}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(map[string]interface{}),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError {
		if n == 1 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	// start rule is rule [0]
	p.read() // advance to first rune
	val, ok := p.parseRule(g.rules[0])
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)
	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn != utf8.RuneError {
		start := p.pt
		p.read()
		p.failAt(true, start.position, ".")
		return p.sliceFrom(start), true
	}
	p.failAt(false, p.pt.position, ".")
	return nil, false
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError {
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)
	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
